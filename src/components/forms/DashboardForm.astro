<div class="min-h-screen bg-background-dark py-12 px-4 sm:px-6 lg:px-8">
  <div class="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-8">
    <h2 class="text-3xl font-bold text-gray-900 mb-6">Registro de Reunión</h2>

    <form id="reunionForm" class="space-y-6">
      <!-- Fecha -->
      <div class="flex gap-6 justify-around">
        <div>
            <label for="fecha" class="block text-sm font-medium text-gray-700 mb-2">
              Fecha
            </label>
            <input
              type="date"
              id="fecha"
              name="fecha"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
            />
        </div>

        <div>
            <label for="fecha" class="block text-sm font-medium text-gray-700 mb-2">
                Hora Inicio
            </label>
            <input
                type="time"
                id="HoraInicio"
                name="HoraInicio"
                required
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
            />
        </div>
        <div>
            <label for="fecha" class="block text-sm font-medium text-gray-700 mb-2">
                Hora Fin
            </label>
            <input
                type="time"
                id="HoraFin"
                name="HoraFin"
                required
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
            />
        </div>

    </div>

      <div>
        <label for="numActa" class="block text-sm font-medium text-gray-700 mb-2">
          Numero de Acta
        </label>
        <input
          type="text"
          id="numActa"
          name="numActa"
          required
          placeholder="Numero de acta"
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
        />
      </div>

      <div>
        <label for="placeJunta" class="block text-sm font-medium text-gray-700 mb-2">
          Lugar de la reunión
        </label>
        <input
          type="text"
          id="placeJunta"
          name="placeJunta"
          required
          placeholder="Lugar de la reunión"
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
        />
      </div>

      <div class="flex flex-col">
        <div class="flex justify-between">
            <label for="administrador" class="text-sm font-medium text-gray-700 mb-2">
              Administrador
            </label>
            <label for="numColegiado" class="text-sm font-medium text-gray-700 mb-2">
              Número de colegiado
            </label>
        </div>
        <div class="flex gap-4">
            <input
              type="text"
              id="administrador"
              name="administrador"
              required
              placeholder="Nombre del administrador"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
            />
            <input
              type="text"
              id="numColegiado"
              name="numColegiado"
              required
              placeholder="Número de colegiado"
              class="w-36 px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
            />
        </div>
      </div>

      <!-- Audio -->
      <div>
        <label for="audio" class="block text-sm font-medium text-gray-700 mb-2">
          Audio de la reunión
        </label>
        <input
          type="file"
          id="audio"
          name="audio"
          accept="audio/*"
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
        />
        <p class="mt-1 text-sm text-gray-500">Formato: MP3, WAV, M4A, etc.</p>
      </div>

      <!-- Orden del día -->
      <div id="ordenDiv">
        <label for="ordenDia" class="block text-sm font-medium text-gray-700 mb-2">
          Orden del día
        </label>
        <input
          id="ordenDia"
          name="ordenDia"
          placeholder="Punto a tratar en la reunión"
          class="orden w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition resize-vertical"
        />
        <button class="text-sm border-2 border-green-500 px-4 py-1 rounded-xl mt-2 text-green-700 hover:bg-green-100 hover:border-green-600 transition"
                type="button"
                id="addOrdenDia">
            Añadir
        </button>
      </div>

        <!-- Comunidad -->
    <div>
        <label for="comunidad" class="block text-sm font-medium text-gray-700 mb-2">
            Comunidad
        </label>
        <select
            id="comunidad"
            name="comunidad"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
        >
            <option value="">Selecciona una comunidad</option>
        </select>
        <button type="button" id="loadAsistentes" class="hidden mt-2 text-sm text-blue-600 hover:underline">
            Abrir lista de asistentes
        </button>
    </div>

    <div class="disabled">
        <label for="nombrePresidente" class="block text-sm font-medium text-gray-700 mb-2">
          Presidente de la comunidad
        </label>
        <select
            id="nombrePresidente"
            name="nombrePresidente"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
        >
            <option value="">Selecciona</option>
        </select>
    </div>

      <!-- Botones -->
      <div class="flex gap-4 pt-4">
        <button
          type="submit"
          class="flex-1 bg-blue-600 text-white py-3 px-6 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition font-medium"
        >
          Guardar Reunión
        </button>
        <button
          type="reset"
          class="flex-1 bg-gray-200 text-gray-700 py-3 px-6 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition font-medium"
        >
          Limpiar
        </button>
      </div>
    </form>

    <!-- Mensaje de éxito (oculto por defecto) -->
    <div id="successMessage" class="hidden mt-6 p-4 bg-green-50 border border-green-200 rounded-md">
      <p class="text-green-800 font-medium">✓ Reunión registrada correctamente</p>
    </div>
  </div>
</div>

<div id="formComunidad" class="flex flex-col absolute top-10 z-40 items-center border-8 border-amber-300 rounded-4xl w-full justify-center p-16 bg-blue-900 hidden">
    <div class="flex w-full justify-center mb-10">
        <div id="tabla-comunidad" class="mt-8 ml-16 px-4">
          <table class="min-w-full bg-white border border-gray-300 rounded-xl shadow-md">
            <thead class="bg-gray-500 font-bold">
              <tr>
                <th class="w-[50px] px-4 py-3 border-b text-left text-sm font-medium text-gray-50">NUMERO</th>
                <th class="w-[400px] px-4 py-3 border-b text-left text-sm font-medium text-gray-50">NOMBRE DEL PROPIETARIO</th>
                <th class="w-[80px] px-4 py-3 border-b text-left text-sm font-medium text-gray-50">PISO</th>
                <th class="w-[80px] px-4 py-3 border-b text-left text-sm font-medium text-gray-50">COEF.%</th>
                <th class="w-[400px] px-4 py-3 border-b text-left text-sm font-medium text-gray-50">REPRESENTADO POR</th>
                <th class="w-[400px] px-4 py-3 border-b text-left text-sm font-medium text-gray-50">REPRESENTADO POR OTROS</th>
                <th class="w-[180px] px-4 py-3 border-b text-left text-sm font-medium text-gray-50">ASISTE</th>
              </tr>
            </thead>
            <tbody id="cuerpo-tabla">
              <!-- Aquí se llenará dinámicamente -->
            </tbody>
          </table>
        </div>
    </div>
    <div class="flex justify-center w-full">
        <button id="saveAsistentes" class="flex w-4xl justify-center px-6 py-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition font-medium mb-10" >
            Guardar Asistentes
        </button>
    </div>
</div>

<script>
    const token = localStorage.getItem('rpg_auth_token');
    if(!token) {
        window.location.href = '/login';
    }
    const API_BASE = 'https://auth-service-eight-mocha.vercel.app/api';
    const comunidades = await fetchComunidades();
    const reunionForm = document.getElementById('reunionForm') as HTMLFormElement;
    const successMessage = document.getElementById('successMessage');
    const select = document.getElementById('comunidad') as HTMLSelectElement;
    const saveAsistentesBtn = document.getElementById('saveAsistentes') as HTMLButtonElement;
    const loadAsistentesBtn = document.getElementById('loadAsistentes') as HTMLButtonElement;
    const addOrdenDiaBtn = document.getElementById('addOrdenDia') as HTMLButtonElement;
    const ordenDiv = document.getElementById('ordenDiv') as HTMLDivElement;
    let comunidad = {};
    let direccionComunidad = '';
    let puntosOrdenDiaElements = document.querySelectorAll('.puntos-orden') as NodeListOf<HTMLParagraphElement>;
    //@ts-ignore
    let puntosOrdenDiaArray = [];
    //@ts-ignore
    let pisos = [];
    //@ts-ignore
    let asistentes = [];
    const formComunidad = document.getElementById('formComunidad') as HTMLDialogElement;

    addOrdenDiaBtn.addEventListener('click', () => {
        const ordenInput = document.getElementById('ordenDia') as HTMLInputElement;
        const nuevoPunto = ordenInput.value.trim();
        if(nuevoPunto !== '') {
            const nuevoElemento = document.createElement('p');
            nuevoElemento.textContent = `• ${nuevoPunto}`;
            nuevoElemento.className = 'text-gray-800 mb-1 puntos-orden';
            ordenDiv.appendChild(nuevoElemento);
            ordenInput.value = '';
        }
    });

    //@ts-ignore
    comunidades.forEach((comunidad) => {
        const option = document.createElement('option');
        option.value = comunidad.comunidad_numero;
        option.textContent = comunidad.comunidad_direccion;
        //@ts-ignore
        select.appendChild(option);
    });

    loadAsistentesBtn.addEventListener('click', () => {
        formComunidad.classList.remove('hidden');
    });

    saveAsistentesBtn.addEventListener('click', () => {
        formComunidad.classList.add('hidden');
        loadAsistentesBtn.classList.remove('hidden');
        asistentes.length = 0;
        const representanteOtros = document.querySelectorAll('.representante-otros') as NodeListOf<HTMLInputElement>;
        const representanteVecino = document.querySelectorAll('.representante-select') as NodeListOf<HTMLSelectElement>;
        const pisoAsiste = document.querySelectorAll('.representante-asiste') as NodeListOf<HTMLSelectElement>;
        representanteOtros.forEach((input) => {
            let asistente={}
            if(input.value.trim() !== '') {
                asistente = {
                    //@ts-ignore
                    propietario: comunidad.comunidades[0][input.dataset.propietarioIndex!].propietario,
                    //@ts-ignore
                    piso: comunidad.comunidades[0][input.dataset.propietarioIndex!].piso,
                    //@ts-ignore
                    coeficiente: comunidad.comunidades[0][input.dataset.propietarioIndex!].coeficiente,
                    //@ts-ignore
                    representanteVecino: representanteVecino[input.dataset.propietarioIndex!].value,
                    representanteOtros: input.value.trim(),
                    //@ts-ignore
                    pisoAsiste: pisoAsiste[input.dataset.propietarioIndex!].value
                }
            }
            //@ts-ignore
            if(representanteVecino[input.dataset.propietarioIndex!].value.trim() !== '') {
                asistente = {
                    //@ts-ignore
                    propietario: comunidad.comunidades[0][input.dataset.propietarioIndex!].propietario,
                    //@ts-ignore
                    piso: comunidad.comunidades[0][input.dataset.propietarioIndex!].piso,
                    //@ts-ignore
                    coeficiente: comunidad.comunidades[0][input.dataset.propietarioIndex!].coeficiente,
                    //@ts-ignore
                    representanteVecino: representanteVecino[input.dataset.propietarioIndex!].value,
                    representanteOtros: input.value.trim(),
                    //@ts-ignore
                    pisoAsiste: pisoAsiste[input.dataset.propietarioIndex!].value
                }
            } else {
                asistente = {
                    propietarioIndex: input.dataset.propietarioIndex,
                    //@ts-ignore
                    propietario: comunidad.comunidades[0][input.dataset.propietarioIndex!].propietario,
                    //@ts-ignore
                    piso: comunidad.comunidades[0][input.dataset.propietarioIndex!].piso,
                    //@ts-ignore
                    coeficiente: comunidad.comunidades[0][input.dataset.propietarioIndex!].coeficiente,
                    representanteVecino: input.value.trim(),
                    representanteOtros: input.value.trim(),
                    //@ts-ignore
                    pisoAsiste: pisoAsiste[input.dataset.propietarioIndex!].value
                }
            }
            //@ts-ignore
            if(asistente.representanteVecino || asistente.representanteOtros || asistente.pisoAsiste === 'SI') {
                asistentes.push(asistente);
            }
        });
    });

    select.addEventListener('change', async function(event) {
        //@ts-ignore
        const comunidadSeleccionada = event.target.value;
        direccionComunidad = select.options[select.selectedIndex].text
        //@ts-ignore
        const textoSeleccionado = event.target.options[event.target.selectedIndex].text;

        comunidad = await fetchComunidad(comunidadSeleccionada);
        construirTabla(comunidad);
        formComunidad.classList.remove('hidden');
        cargarPresidentes();
    });

    const nombrePresidenteSelect = document.getElementById('nombrePresidente') as HTMLSelectElement;
    function cargarPresidentes() {
            if(pisos.length > 0) {
                nombrePresidenteSelect.innerHTML = '<option value="">Selecciona</option>';
                //@ts-ignore
                pisos.forEach(propietario => {
                    const option = document.createElement('option');
                    option.value = propietario.piso +  '/' + propietario.propietario
                    option.textContent = propietario.piso +  ' - ' + propietario.propietario
                    nombrePresidenteSelect.appendChild(option);
                });
            }
        }

    //@ts-ignore
    async function fetchComunidad(numero) {
        const response = await fetch(`${API_BASE}/comunidades.js?numero=${numero}`, {
            method: 'GET',
            headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
            }
        });
        return await response.json();
    };
//@ts-ignore
    function formDataToObject(formData) {
        const obj = {};
        for (let [key, value] of formData.entries()) {
            //@ts-ignore
            obj[key] = value;
        }
        return obj;
    }

    reunionForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = new FormData(reunionForm);
        puntosOrdenDiaElements = document.querySelectorAll('.puntos-orden') as NodeListOf<HTMLParagraphElement>;
        //@ts-ignore
        formData.append('asistentesJson', JSON.stringify(asistentes));
        //@ts-ignore
        const htmlContent = generarHtmlActa(formData, asistentes);
        const formDataObj = formDataToObject(formData);
        puntosOrdenDiaElements.forEach((element, index) => {
            puntosOrdenDiaArray.push({index:index+1,text:element.textContent});
        });
        try {
        // Simular envío de datos al servidor
        //const response = await fetch('/api/generar-docx', {
        //    method: 'POST',
        //    body: JSON.stringify({ html: htmlContent }),
        //});
        //@ts-ignore
        formDataObj['comunidad'] = direccionComunidad;
        const response = await fetch('/api/html-docx', {
            method: 'POST',
            // @ts-ignore
            body: JSON.stringify({ formData: formDataObj, asistentes: asistentes, ordenDia: puntosOrdenDiaArray }),
        });

        //const data = await response.json();
        if (response.ok) {
        const blob = await response.blob();
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `acta-reunion-${formData.get('fecha')}.docx`;
        link.click();
        URL.revokeObjectURL(url);
      }
        // @ts-ignore
        successMessage.classList.remove('hidden');

        // Limpiar el formulario
        reunionForm.reset();
        } catch (error) {
        console.error('Error al registrar la reunión:', error);
        alert('Hubo un error al registrar la reunión. Por favor, inténtalo de nuevo.');
        }
    });

async function fetchComunidades() {
  try {
    const response = await fetch(`${API_BASE}/comunidades.js`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error || 'Error al obtener comunidades');
    }

    if (data.success) {
      return data.comunidades;
    }
  } catch (error) {
    //@ts-ignore
    console.error('Error:', error.message);
    // Manejar errores de autenticación (redirigir a login, etc.)
    //@ts-ignore
    if (error.message.includes('401') || error.message.includes('Token')) {
      // Redirigir al login
      window.location.href = '/login';
    }
  }
};
const cuerpoTabla = document.getElementById('cuerpo-tabla') as HTMLTableSectionElement;
//@ts-ignore
 function construirTabla(comunidad) {
    const comunidadData = comunidad.comunidades[0]
    // Limpiar tabla anterior
    cuerpoTabla.innerHTML = '';

    //@ts-ignore
    pisos = comunidadData.map(item => ({
      piso: item.piso,
      propietario: item.propietario
    }));
    //@ts-ignore
    comunidadData.forEach((propietario, index) => {
      const fila = document.createElement('tr');
      fila.className = 'hover:bg-gray-50 border-b';
      // Calcular coeficiente porcentual (asumiendo que el total es 100000 o similar)
      // Ajusta este cálculo según tu lógica de negocio
      const coeficientePorcentual = ((propietario.coeficiente / 100000) * 100).toFixed(3) + '%';

      fila.innerHTML = `
        <td class="px-4 py-3 text-sm text-gray-900 font-mono">${index + 1}</td>
        <td class="px-4 py-3 text-sm text-gray-900">${propietario.propietario}</td>
        <td class="px-4 py-3 text-sm text-gray-700 font-mono">${propietario.piso}</td>
        <td class="px-4 py-3 text-sm text-gray-700 text-right">${coeficientePorcentual}</td>
        <td class="px-4 py-3 representante-vecino">
          <select
            class="representante-select w-full px-2 py-1 border border-gray-300 rounded text-sm"
            data-propietario-index="${index}"
          >
            <option value="">Seleccionar representante</option>
            ${pisos.map(piso => `
              <option value="${piso.piso} - ${piso.propietario}">${piso.piso} - ${piso.propietario}</option>
            `).join('')}
          </select>
        </td>
        <td class="px-4 py-3 text-sm text-gray-700 font-mono piso-representante-otros" id="piso-representante-otros-${index}">
            <input
            type="text"
            class="representante-otros w-full px-2 py-1 border border-gray-300 rounded text-sm"
            data-propietario-index="${index}"
            placeholder="Indicar si es representante por otros"
          />
        </td>
        <td class="px-4 py-3 text-sm text-gray-700 font-mono piso-asiste" id="piso-asiste-${index}">
            <select
            class="representante-asiste w-full px-2 py-1 border border-gray-300 rounded text-sm"
            data-propietario-index="${index}"
          >
            <option value="NO">NO</option>
            <option value="SI">SI</option>
        </td>
      `;

      cuerpoTabla.appendChild(fila);
    });
  }

  //@ts-ignore
 function generarHtmlActa(formData, asistentes) {
    const fechaForm = formData.get('fecha');
    const [anno, mesNumero, dia] = fechaForm.split('-');
    const mes = convertirMes(mesNumero);
    const tablaAsistentes = asistentesArray(asistentes);
    let puntosOrdenDiaHtml = '';
    //@ts-ignore
    const numeroAsistentes = asistentes.length;
      //@ts-ignore
    const CalculonumeroTotalCoeficientes = asistentes.reduce((total, asistente) => total + parseFloat(asistente.coeficiente), 0);
    const numeroTotalCoeficientes = (CalculonumeroTotalCoeficientes/1000).toFixed(3);
    puntosOrdenDiaElements.forEach((element, index) => {
        puntosOrdenDiaHtml += `<p><strong>${index+1}.</strong> ${element.textContent}</p>`;
    });

    const [piso, presidente] = formData.get('nombrePresidente').split('/');

    const htmlContent = `
      <!DOCTYPE html>
      <html lang="es">
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; }
          </style>
        </head>
        <body>
            <p>
                <u>ACTA Nº <strong>${formData.get('numActa')}</strong></u> CORRESPONDIENTE A LA JUNTA GENERAL ORDINARIA CELEBRADA POR LA COMUNIDAD DE PROPIETARIOS ${direccionComunidad}, EL DÍA ${dia} DE ${mes} DE ${anno} EN EL ${formData.get('placeJunta')}.
            </p>
            <h4>ASISTENTES:</h4>
            <div style="margin-top: 10px; margin-bottom: 20px;">
                ${tablaAsistentes}
            </div>
            <p><strong>Número de asistentes:</strong> ${numeroAsistentes} propietarios o representantes.</p>
            <p><strong>Número total de coeficientes representados:</strong> ${numeroTotalCoeficientes} %.</p>
            <p></p>
            <p>
                En Torrejón de Ardoz, a ${dia} de ${mes} de ${anno}, siendo las ${formData.get('HoraInicio')} horas y en segunda convocatoria, se reúne la Junta de Propietarios de la ${direccionComunidad} de Torrejón de Ardoz, con la asistencia de los copropietarios que arriba se reseñan, pasándose a continuación a tratar los puntos expuestos en el Orden del Día, de acuerdo a la convocatoria que en el plazo legal se había hecho llegar en tiempo y forma a todos los interesados, como así lo ratifican los asistentes.
            </p>
            <p></p>
            <h4 style="text-align: center;"><strong><u>ORDEN DEL DÍA:</u></strong></h4>
            <div style="margin-top: 10px; margin-bottom: 20px;">
                ${puntosOrdenDiaHtml}
            </div>
            <p></p>
            <p>
                Y sin más comentarios, se levantó la sesión a las ${formData.get('HoraFin')} horas, extendiéndose la presente acta, de la que yo, Administrador-Secretario, doy fe (s.e.u.o.).
            </p>
            <p></p>
            <p></p>
            <div>
                <span><strong>El Administrador-Secretario                                                           El Presidente</strong></span>
                <p></p>
                <p></p>
                <p></p>
                <p></p>
                <span><strong>Fdo.: Por Admon.J.M.F.Ortiz, S.L.</strong></span>
                <span><strong>${formData.get('administrador')}                                    ${presidente}</strong></span>
                <span><strong>${formData.get('numColegiado')}                                                                       ${piso}</strong></span>
            </div>
            <p></p>
            <p style="font-size: 12px;">
                <strong><u>DILIGENCIA:</u></strong> Para hacer constar que esta acta, cuya original figura en el libro de Actas de la Comunidad, ha sido redactada y cerrada cumpliendo todos los requisitos legales, en cuanto a tiempo y forma, establecidos en la Ley de Propiedad Horizontal, repartiéndose en el buzón de los propietarios residentes y enviándose a la dirección que consta a la Comunidad a los no residentes en la misma.
            </p>
        </body>
      </html>
    `;
    return htmlContent;
}

function convertirMes(mesNumero: string): string {
    const meses = {
        '01': 'Enero',
        '02': 'Febrero',
        '03': 'Marzo',
        '04': 'Abril',
        '05': 'Mayo',
        '06': 'Junio',
        '07': 'Julio',
        '08': 'Agosto',
        '09': 'Septiembre',
        '10': 'Octubre',
        '11': 'Noviembre',
        '12': 'Diciembre'
    };
    // @ts-ignore
    return meses[mesNumero] || '';
}
//@ts-ignore
function asistentesArray(asistentes) {
    let tabla = `<table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse;">
        <thead>
            <tr>
                <th style="font-size: 12px; text-align: left; background-color: #f0f0f0;">Propietario</th>
                <th style="font-size: 12px; text-align: center; background-color: #f0f0f0;">Piso</th>
                <th style="font-size: 12px; text-align: center; background-color: #f0f0f0;">Coef%</th>
                <th style="font-size: 12px; text-align: left; background-color: #f0f0f0;">Representado Por</th>
            </tr>
        </thead>
        <tbody>`;

    //@ts-ignore
    asistentes.forEach(asistente => {
        tabla += `<tr>
            <td style="font-size: 10px; padding: 4px;">${asistente.propietario}</td>
            <td style="font-size: 10px; padding: 4px; text-align: center;">${asistente.piso}</td>
            <td style="font-size: 10px; padding: 4px; text-align: center;">${asistente.coeficiente}</td>
            <td style="font-size: 10px; padding: 4px;">${asistente.representanteVecino || ''}</td>
        </tr>`;
    });

    tabla += '</tbody></table>';
    return tabla;
}
</script>
