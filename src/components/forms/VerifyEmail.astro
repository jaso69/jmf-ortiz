<div class="flex items-center justify-center mt-8 mb-8">
    <div class="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
            <!-- Header -->
            <div class="text-center mb-8">
                <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-envelope text-blue-600 text-2xl"></i>
                </div>
                <h1 class="text-2xl font-bold text-gray-900">Verificación de Email</h1>
                <p class="text-gray-600 mt-2">Ingresa el código que enviamos a tu correo</p>
            </div>

            <!-- Email display -->
            <div class="bg-blue-50 rounded-lg p-4 mb-6 text-center">
                <p class="text-sm text-gray-700">
                    Código enviado a:
                    <span id="userEmail" class="font-semibold text-blue-700"></span>
                </p>
            </div>

            <!-- Verification form -->
            <form id="verifyForm">
                <!-- Code inputs -->
                <div class="flex justify-between gap-2 mb-6 ">
                    <input type="text" class="code-input w-12 h-12 text-center text-xl font-bold border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="code-input w-12 h-12 text-center text-xl font-bold border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="code-input w-12 h-12 text-center text-xl font-bold border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="code-input w-12 h-12 text-center text-xl font-bold border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="code-input w-12 h-12 text-center text-xl font-bold border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="code-input w-12 h-12 text-center text-xl font-bold border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200" maxlength="1" pattern="[0-9]" inputmode="numeric">
                </div>

                <!-- Submit button -->
                <button type="submit" id="verifyBtn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg transition duration-200 flex items-center justify-center">
                    <span>Verificar Código</span>
                </button>
            </form>

            <!-- Messages container -->
            <div id="messageContainer" class="mt-4"></div>

            <!-- Resend code link -->
            <div class="text-center mt-6">
                <p class="text-sm text-gray-600">
                    ¿No recibiste el código?
                    <a href="resend-code.html" class="text-blue-600 hover:text-blue-800 font-semibold transition duration-200">
                        Reenviar código
                    </a>
                </p>
            </div>

            <!-- Back to login -->
            <div class="text-center mt-4">
                <a href="index.html" class="text-gray-500 hover:text-gray-700 text-sm transition duration-200">
                    <i class="fas fa-arrow-left mr-1"></i>
                    Volver al inicio de sesión
                </a>
            </div>
    </div>
</div>

<script>
    const API_BASE = 'https://auth-service-eight-mocha.vercel.app/api';

    const inputs = document.querySelectorAll('.code-input') as NodeListOf<HTMLInputElement>;

        inputs.forEach((input, index) => {
            // Auto-enfocar el primer input
            if (index === 0) {
                input.focus();
            }

            // Manejar input
            input.addEventListener('input', (e) => {
                //@ts-ignore
                if (e.target.value.length === 1) {
                    if (index < inputs.length - 1) {
                        inputs[index + 1].focus();
                    }
                }
            });

            // Manejar borrado con Backspace
            input.addEventListener('keydown', (e) => {
                //@ts-ignore
                if (e.key === 'Backspace' && e.target.value === '') {
                    if (index > 0) {
                        inputs[index - 1].focus();
                    }
                }
            });

            // Prevenir caracteres no numéricos
            input.addEventListener('keypress', (e) => {
                if (!/[0-9]/.test(e.key)) {
                    e.preventDefault();
                }
            });
        });

    const verifyForm = document.getElementById('verifyForm') as HTMLFormElement;
        if (verifyForm) {
            verifyForm.addEventListener('submit', (e) => verification(e));
        }

    function preloadEmail() {
        // Obtener email de la URL o localStorage
        const urlParams = new URLSearchParams(window.location.search);
        const emailFromUrl = urlParams.get('email');
        const emailFromStorage = localStorage.getItem('registerEmail');

        const email = emailFromUrl || emailFromStorage;
        const userEmailElement = document.getElementById('userEmail');

        if (userEmailElement && email) {
            userEmailElement.textContent = email;
            localStorage.setItem('registerEmail', email);
        } else if (userEmailElement) {
            userEmailElement.textContent = 'No especificado';
            alert('No se encontró el email para verificar');
        }
    }

    //@ts-ignore
    async function verification(event) {
        event.preventDefault();

        const code = getVerificationCode();
        if (!validateCode(code)) {
            return;
        }

        const submitBtn = document.getElementById('verifyBtn');
        setButtonState(submitBtn, true, 'Verificando...');

        try {
            const result = await verifyCode(code);
            handleVerificationSuccess(result);
        } catch (error) {
            handleVerificationError(error);
        } finally {
            setButtonState(submitBtn, false, 'Verificar Código');
        }
    }
    //@ts-ignore
    function setButtonState(button, loading, text) {
        if (button) {
            button.disabled = loading;
            button.innerHTML = loading ?
                `<span class="loading-spinner"></span> ${text}` :
                text;
        }
    }

    //@ts-ignore
    function handleVerificationError(error) {
            console.error('Verification error:', error);

            if (error.message.includes('400')) {
                alert('Código inválido o expirado. Por favor, verifique el código e intente nuevamente.');
            } else if (error.message.includes('404')) {
                alert('No se encontró la solicitud de verificación. ¿Desea <a href="register.html">registrarse nuevamente</a>?');
            } else {
                alert(error.message);
            }
        }


    //@ts-ignore
    function handleVerificationSuccess(result) {
        showMessage('¡Email verificado exitosamente! Redirigiendo...');
        localStorage.removeItem('rpg_auth_token');
        localStorage.removeItem('rpg_user_data');
        localStorage.removeItem('registerEmail');
        window.location.href = '/login';
    }
    //@ts-ignore
     function showMessage(message, type = 'success') {
        clearMessages();

        const messageDiv = document.createElement('div');
        messageDiv.className = 'text-green-700 message ';
        messageDiv.innerHTML = message;

        const container = document.getElementById('messageContainer');
        if (container) {
            container.appendChild(messageDiv);
        }

        // Auto-remove success messages
        if (type === 'success') {
            setTimeout(() => {
                if (messageDiv.parentNode) {
                    messageDiv.remove();
                }
            }, 500);
        }
    }

    function clearMessages() {
        const container = document.getElementById('messageContainer');
        if (container) {
            container.innerHTML = '';
        }
    }

    //@ts-ignore
    async function verifyCode(code) {
        const email = localStorage.getItem('registerEmail');

        if (!email) {
            throw new Error('No se encontró el email para verificar');
        }

        const verificationData = {
            email: email,
            code: code
        };

        console.log('Enviando datos de verificación:', verificationData);

        const response = await fetch(`${API_BASE}/verify-code.js`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(verificationData)
        });

        const data = await response.json();
        console.log('Respuesta del servidor:', data);

        if (!response.ok) {
            throw new Error(data.error || `Error en la verificación: ${response.status}`);
        }

        return data;
    }

    function getVerificationCode() {
        const inputs = document.querySelectorAll('.code-input');
        let code = '';
        inputs.forEach(input => {
            //@ts-ignore
            code += input.value;
        });
        return code;
    }
    //@ts-ignore
    function validateCode(code) {
        if (code.length !== 6) {
            alert('El código debe tener exactamente 6 dígitos');
            return false;
        }

        if (!/^\d+$/.test(code)) {
            alert('El código debe contener solo números');
            return false;
        }

        return true;
    }

</script>

<style>
        .loading-spinner {
            display: inline-block;
            width: 1rem;
            height: 1rem;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .code-input {
            transition: all 0.2s ease-in-out;
        }

        .code-input:focus {
            transform: scale(1.05);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }

        .message {
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .message.success {
            background-color: #dcfce7;
            color: #166534;
            border: 1px solid #bbf7d0;
        }

        .message.error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #fecaca;
        }

        .message.info {
            background-color: #dbeafe;
            color: #1e40af;
            border: 1px solid #bfdbfe;
        }
    </style>
